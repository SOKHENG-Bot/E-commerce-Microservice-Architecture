services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - ecommerce-network

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,INTERNAL://0.0.0.0:9093
      # Replace 127.0.0.1 with actual host IP if needed
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,INTERNAL://kafka:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,INTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    healthcheck:
      test:
        [
          "CMD",
          "kafka-topics",
          "--bootstrap-server",
          "localhost:9092",
          "--list",
        ]
      interval: 10s
      timeout: 5s
      retries: 10
    ports:
      - "9092:9092"
    networks:
      - ecommerce-network

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: "local"
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: "kafka:9093"
      KAFKA_CLUSTERS_0_ZOOKEEPER: "zookeeper:2181"
    depends_on:
      - kafka
    networks:
      - ecommerce-network

  # PostgreSQL Database for User Service
  user_postgres:
    image: postgres:15
    container_name: user_postgres
    environment:
      POSTGRES_DB: user
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
    ports:
      - "5435:5432" # Different port to avoid conflicts
    volumes:
      - user_postgres_data:/var/lib/postgresql/data
      - ../database/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d user"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - ecommerce-network

  # User Service Nginx Load Balancer
  user_service_nginx:
    image: nginx:alpine
    container_name: user_service_nginx
    ports:
      - "8010:80" # User service nginx on port 8010
    volumes:
      - ../nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ../nginx/status.html:/usr/share/nginx/html/status.html:ro
    depends_on:
      - user_service_1
      - user_service_2
      - user_service_3
    networks:
      - ecommerce-network
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--quiet",
          "--tries=1",
          "--spider",
          "http://127.0.0.1/nginx-health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3

  # User Service Instance 1
  user_service_1:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    container_name: user_service_1
    ports:
      - "8011:8001"
    environment:
      # Application
      APP_NAME: "E-Commerce Service"
      APP_VERSION: "1.0.0"
      DEBUG: "true"
      ENVIRONMENT: "development"
      SERVICE_NAME: "user_service_1"

      # Service URLs
      USER_SERVICE_URL: "http://user_service_1:8001"
      USER_SERVICE_HEALTH: "http://user_service_1:8001/health"

      # Database
      USER_DATABASE_URL: "postgresql+asyncpg://user:password@user_postgres:5432/user"
      POSTGRES_DB: "user"
      POSTGRES_USER: "user"
      POSTGRES_PASSWORD: "password"

      # Security
      SECRET_KEY: "47f4fb9b2bfd894a1229af7b265ff5c4"
      ALGORITHM: "HS256"
      ACCESS_TOKEN_EXPIRE_MINUTES: "30"
      REFRESH_TOKEN_EXPIRE_DAYS: "30"

      # Redis
      REDIS_URL: "redis://redis:6379/0"

      # Kafka
      KAFKA_BOOTSTRAP_SERVERS: "kafka:9092"
      KAFKA_GROUP_ID: "user-service-group"

      # CORS
      CORS_ORIGINS: '["*"]'
      CORS_CREDENTIALS: "true"
      CORS_METHODS: '["*"]'
      CORS_HEADERS: '["*"]'

      # Logging
      LOG_LEVEL: "INFO"
      ENABLE_ACCESS_LOGS: "true"
    depends_on:
      kafka:
        condition: service_healthy
      user_postgres:
        condition: service_healthy
    networks:
      - ecommerce-network

  # User Service Instance 2
  user_service_2:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    container_name: user_service_2
    ports:
      - "8012:8001" # External 8012 -> Internal 8001
    environment:
      # Application
      APP_NAME: "E-Commerce Service"
      APP_VERSION: "1.0.0"
      DEBUG: "true"
      ENVIRONMENT: "development"
      SERVICE_NAME: "user_service_2"

      # Service URLs
      USER_SERVICE_URL: "http://user_service_2:8001"
      USER_SERVICE_HEALTH: "http://user_service_2:8001/health"

      # Database
      USER_DATABASE_URL: "postgresql+asyncpg://user:password@user_postgres:5432/user"
      POSTGRES_DB: "user"
      POSTGRES_USER: "user"
      POSTGRES_PASSWORD: "password"

      # Security
      SECRET_KEY: "47f4fb9b2bfd894a1229af7b265ff5c4"
      ALGORITHM: "HS256"
      ACCESS_TOKEN_EXPIRE_MINUTES: "30"
      REFRESH_TOKEN_EXPIRE_DAYS: "30"

      # Redis
      REDIS_URL: "redis://redis:6379/0"

      # Kafka
      KAFKA_BOOTSTRAP_SERVERS: "kafka:9092"
      KAFKA_GROUP_ID: "user-service-group"

      # CORS
      CORS_ORIGINS: '["*"]'
      CORS_CREDENTIALS: "true"
      CORS_METHODS: '["*"]'
      CORS_HEADERS: '["*"]'

      # Logging
      LOG_LEVEL: "INFO"
      ENABLE_ACCESS_LOGS: "true"
    depends_on:
      kafka:
        condition: service_healthy
      user_postgres:
        condition: service_healthy
    networks:
      - ecommerce-network

  # User Service Instance 3
  user_service_3:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    container_name: user_service_3
    ports:
      - "8013:8001" # External 8013 -> Internal 8001
    environment:
      # Application
      APP_NAME: "E-Commerce Service"
      APP_VERSION: "1.0.0"
      DEBUG: "true"
      ENVIRONMENT: "development"
      SERVICE_NAME: "user_service_3"

      # Service URLs
      USER_SERVICE_URL: "http://user_service_3:8001"
      USER_SERVICE_HEALTH: "http://user_service_3:8001/health"

      # Database
      USER_DATABASE_URL: "postgresql+asyncpg://user:password@user_postgres:5432/user"
      POSTGRES_DB: "user"
      POSTGRES_USER: "user"
      POSTGRES_PASSWORD: "password"

      # Security
      SECRET_KEY: "47f4fb9b2bfd894a1229af7b265ff5c4"
      ALGORITHM: "HS256"
      ACCESS_TOKEN_EXPIRE_MINUTES: "30"
      REFRESH_TOKEN_EXPIRE_DAYS: "30"

      # Redis
      REDIS_URL: "redis://redis:6379/0"

      # Kafka
      KAFKA_BOOTSTRAP_SERVERS: "kafka:9092"
      KAFKA_GROUP_ID: "user-service-group"

      # CORS
      CORS_ORIGINS: '["*"]'
      CORS_CREDENTIALS: "true"
      CORS_METHODS: '["*"]'
      CORS_HEADERS: '["*"]'

      # Logging
      LOG_LEVEL: "INFO"
      ENABLE_ACCESS_LOGS: "true"
    depends_on:
      kafka:
        condition: service_healthy
      user_postgres:
        condition: service_healthy
    networks:
      - ecommerce-network

volumes:
  postgres_data:
  user_postgres_data:

networks:
  ecommerce-network:
    external: true
