services:
  # Infrastructure Services
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2182
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2182:2182"
    networks:
      - ecommerce-network

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2182
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9093,INTERNAL://0.0.0.0:9094
      # Replace 127.0.0.1 with actual host IP if needed
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9093,INTERNAL://kafka:9094
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,INTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    healthcheck:
      test:
        [
          "CMD",
          "kafka-topics",
          "--bootstrap-server",
          "localhost:9093",
          "--list",
        ]
      interval: 10s
      timeout: 5s
      retries: 10
    ports:
      - "9093:9093"
    networks:
      - ecommerce-network

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "8081:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: "local"
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: "kafka:9093"
      KAFKA_CLUSTERS_0_ZOOKEEPER: "zookeeper:2182"
    depends_on:
      - kafka
    networks:
      - ecommerce-network

  redis:
    image: "redis:latest"
    container_name: redis
    ports:
      - "6380:6379"
    networks:
      - ecommerce-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL Database for Product Service
  product_postgres:
    image: postgres:15
    container_name: product_postgres
    environment:
      POSTGRES_DB: product
      POSTGRES_USER: product
      POSTGRES_PASSWORD: password
    ports:
      - "5436:5432" # Different port to avoid conflicts with other services
    volumes:
      - product_postgres_data:/var/lib/postgresql/data
      - ../database/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U product -d product"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - ecommerce-network

  # Single Product Service Instance (for development)
  product_service:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    container_name: product_service
    ports:
      - "8002:8002"
    environment:
      # Application
      APP_NAME: "E-Commerce Product Service"
      APP_VERSION: "1.0.0"
      DEBUG: "true"
      ENVIRONMENT: "development"
      SERVICE_NAME: "product_service"

      # Service URLs
      PRODUCT_SERVICE_URL: "http://product_service:8002"
      PRODUCT_SERVICE_HEALTH: "http://product_service:8002/health"

      # Database
      PRODUCT_DATABASE_URL: "postgresql+asyncpg://product:password@product_postgres:5432/product"
      POSTGRES_DB: "product"
      POSTGRES_USER: "product"
      POSTGRES_PASSWORD: "password"

      # Security
      SECRET_KEY: "47f4fb9b2bfd894a1229af7b265ff5c4"
      ALGORITHM: "HS256"

      # Redis
      REDIS_URL: "redis://redis:6379/0"

      # Kafka
      KAFKA_BOOTSTRAP_SERVERS: "kafka:9093"
      KAFKA_GROUP_ID: "product-service-group"

      # CORS
      CORS_ORIGINS: '["*"]'
      CORS_CREDENTIALS: "true"
      CORS_METHODS: '["*"]'
      CORS_HEADERS: '["*"]'

      # Logging
      LOG_LEVEL: "INFO"
      ENABLE_ACCESS_LOGS: "true"

      # Performance Tuning for Load Testing
      REQUEST_TIMEOUT: 30
      RESPONSE_TIMEOUT: 30
      MAX_REQUEST_SIZE: 10485760
      ENABLE_REQUEST_LOGGING: "false" # Disable for performance under load

      # Rate Limiting (reduced for testing)
      RATE_LIMIT_ENABLED: "false" # Temporarily disable for load testing
      RATE_LIMIT_REQUESTS: 1000
      RATE_LIMIT_WINDOW: 60

      # Circuit Breaker (optimized for testing)
      CIRCUIT_BREAKER_ENABLED: "true"
      CIRCUIT_BREAKER_FAILURE_THRESHOLD: 10
      CIRCUIT_BREAKER_TIMEOUT: 30
      CIRCUIT_BREAKER_RECOVERY_TIMEOUT: 60

      # Caching (optimized for performance)
      ENABLE_RESPONSE_CACHING: "true"
      CACHE_TTL_DEFAULT: 300
      CACHE_TTL_STATIC: 3600
    depends_on:
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy
      product_postgres:
        condition: service_healthy
    networks:
      - ecommerce-network

volumes:
  product_postgres_data:

networks:
  ecommerce-network:
    external: true
