"""
This type stub file was generated by pyright.
"""

class MailSettings:
    """A collection of mail settings that specify how to handle this email."""
    def __init__(self, bcc_settings=..., bypass_bounce_management=..., bypass_list_management=..., bypass_spam_management=..., bypass_unsubscribe_management=..., footer_settings=..., sandbox_mode=..., spam_check=...) -> None:
        """Create a MailSettings object

        :param bcc_settings: The BCC Settings of this MailSettings
        :type bcc_settings: BCCSettings, optional
        :param bypass_bounce_management: Whether this MailSettings bypasses bounce management.
                                         Should not be combined with bypass_list_management.
        :type bypass_list_management: BypassBounceManagement, optional
        :param bypass_list_management: Whether this MailSettings bypasses list
                                       management
        :type bypass_list_management: BypassListManagement, optional
        :param bypass_spam_management: Whether this MailSettings bypasses spam management.
                                       Should not be combined with bypass_list_management.
        :type bypass_list_management: BypassSpamManagement, optional
        :param bypass_unsubscribe_management: Whether this MailSettings bypasses unsubscribe management.
                                              Should not be combined with bypass_list_management.
        :type bypass_list_management: BypassUnsubscribeManagement, optional
        :param footer_settings: The default footer specified by this
                                MailSettings
        :type footer_settings: FooterSettings, optional
        :param sandbox_mode: Whether this MailSettings enables sandbox mode
        :type sandbox_mode: SandBoxMode, optional
        :param spam_check: How this MailSettings requests email to be checked
                           for spam
        :type spam_check: SpamCheck, optional
        """
        ...
    
    @property
    def bcc_settings(self): # -> None:
        """The BCC Settings of this MailSettings.

        :rtype: BCCSettings
        """
        ...
    
    @bcc_settings.setter
    def bcc_settings(self, value): # -> None:
        """The BCC Settings of this MailSettings.

        :param value: The BCC Settings of this MailSettings.
        :type value: BCCSettings
        """
        ...
    
    @property
    def bypass_bounce_management(self): # -> None:
        """Whether this MailSettings bypasses bounce management.

        :rtype: BypassBounceManagement
        """
        ...
    
    @bypass_bounce_management.setter
    def bypass_bounce_management(self, value): # -> None:
        """Whether this MailSettings bypasses bounce management.

        :param value: Whether this MailSettings bypasses bounce management.
        :type value: BypassBounceManagement
        """
        ...
    
    @property
    def bypass_list_management(self): # -> None:
        """Whether this MailSettings bypasses list management.

        :rtype: BypassListManagement
        """
        ...
    
    @bypass_list_management.setter
    def bypass_list_management(self, value): # -> None:
        """Whether this MailSettings bypasses list management.

        :param value: Whether this MailSettings bypasses list management.
        :type value: BypassListManagement
        """
        ...
    
    @property
    def bypass_spam_management(self): # -> None:
        """Whether this MailSettings bypasses spam management.

        :rtype: BypassSpamManagement
        """
        ...
    
    @bypass_spam_management.setter
    def bypass_spam_management(self, value): # -> None:
        """Whether this MailSettings bypasses spam management.

        :param value: Whether this MailSettings bypasses spam management.
        :type value: BypassSpamManagement
        """
        ...
    
    @property
    def bypass_unsubscribe_management(self): # -> None:
        """Whether this MailSettings bypasses unsubscribe management.

        :rtype: BypassUnsubscribeManagement
        """
        ...
    
    @bypass_unsubscribe_management.setter
    def bypass_unsubscribe_management(self, value): # -> None:
        """Whether this MailSettings bypasses unsubscribe management.

        :param value: Whether this MailSettings bypasses unsubscribe management.
        :type value: BypassUnsubscribeManagement
        """
        ...
    
    @property
    def footer_settings(self): # -> None:
        """The default footer specified by this MailSettings.

        :rtype: FooterSettings
        """
        ...
    
    @footer_settings.setter
    def footer_settings(self, value): # -> None:
        """The default footer specified by this MailSettings.

        :param value: The default footer specified by this MailSettings.
        :type value: FooterSettings
        """
        ...
    
    @property
    def sandbox_mode(self): # -> None:
        """Whether this MailSettings enables sandbox mode.

        :rtype: SandBoxMode
        """
        ...
    
    @sandbox_mode.setter
    def sandbox_mode(self, value): # -> None:
        """Whether this MailSettings enables sandbox mode.

        :param value: Whether this MailSettings enables sandbox mode.
        :type value: SandBoxMode
        """
        ...
    
    @property
    def spam_check(self): # -> None:
        """How this MailSettings requests email to be checked for spam.

        :rtype: SpamCheck
        """
        ...
    
    @spam_check.setter
    def spam_check(self, value): # -> None:
        """How this MailSettings requests email to be checked for spam.

        :param value: How this MailSettings requests email to be checked
                      for spam.
        :type value: SpamCheck
        """
        ...
    
    def get(self): # -> dict[Any, Any]:
        """
        Get a JSON-ready representation of this MailSettings.

        :returns: This MailSettings, ready for use in a request body.
        :rtype: dict
        """
        ...
    


