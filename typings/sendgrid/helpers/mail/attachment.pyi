"""
This type stub file was generated by pyright.
"""

class Attachment:
    """An attachment to be included with an email."""
    def __init__(self, file_content=..., file_name=..., file_type=..., disposition=..., content_id=...) -> None:
        """Create an Attachment

        :param file_content: The Base64 encoded content of the attachment
        :type file_content: FileContent, string
        :param file_name: The filename of the attachment
        :type file_name: FileName, string
        :param file_type: The MIME type of the content you are attaching
        :type file_type FileType, string, optional
        :param disposition: The content-disposition of the attachment,
                            specifying display style. Specifies how you
                            would like the attachment to be displayed.
                            - "inline" results in the attached file being
                              displayed automatically within the message.
                            - "attachment" results in the attached file
                              requiring some action to display (e.g. opening
                              or downloading the file).
                            If unspecified, "attachment" is used. Must be one
                            of the two choices.
        :type disposition: Disposition, string, optional
        :param content_id: The content id for the attachment.
                           This is used when the Disposition is set to
                           "inline" and the attachment is an image, allowing
                           the file to be displayed within the email body.
        :type content_id: ContentId, string, optional
        """
        ...
    
    @property
    def file_content(self): # -> FileContent | None:
        """The Base64 encoded content of the attachment.

        :rtype: FileContent
        """
        ...
    
    @file_content.setter
    def file_content(self, value): # -> None:
        """The Base64 encoded content of the attachment

        :param value: The Base64 encoded content of the attachment
        :type value: FileContent, string
        """
        ...
    
    @property
    def file_name(self): # -> FileName | None:
        """The file name of the attachment.

        :rtype: FileName
        """
        ...
    
    @file_name.setter
    def file_name(self, value): # -> None:
        """The filename of the attachment

        :param file_name: The filename of the attachment
        :type file_name: FileName, string
        """
        ...
    
    @property
    def file_type(self): # -> FileType | None:
        """The MIME type of the content you are attaching.

        :rtype: FileType
        """
        ...
    
    @file_type.setter
    def file_type(self, value): # -> None:
        """The MIME type of the content you are attaching

        :param file_type: The MIME type of the content you are attaching
        :type file_type FileType, string, optional
        """
        ...
    
    @property
    def disposition(self): # -> Disposition | None:
        """The content-disposition of the attachment, specifying display style.

        Specifies how you would like the attachment to be displayed.
         - "inline" results in the attached file being displayed automatically
            within the message.
         - "attachment" results in the attached file requiring some action to
            display (e.g. opening or downloading the file).
        If unspecified, "attachment" is used. Must be one of the two choices.

        :rtype: Disposition
        """
        ...
    
    @disposition.setter
    def disposition(self, value): # -> None:
        """The content-disposition of the attachment, specifying display style.

        Specifies how you would like the attachment to be displayed.
         - "inline" results in the attached file being displayed automatically
            within the message.
         - "attachment" results in the attached file requiring some action to
            display (e.g. opening or downloading the file).
        If unspecified, "attachment" is used. Must be one of the two choices.

        :param disposition: The content-disposition of the attachment,
                            specifying display style. Specifies how you would
                            like the attachment to be displayed.
                            - "inline" results in the attached file being
                              displayed automatically within the message.
                            - "attachment" results in the attached file
                              requiring some action to display (e.g. opening
                              or downloading the file).
                            If unspecified, "attachment" is used. Must be one
                            of the two choices.
        :type disposition: Disposition, string, optional
        """
        ...
    
    @property
    def content_id(self): # -> ContentId | None:
        """The content id for the attachment.

        This is used when the disposition is set to "inline" and the attachment
        is an image, allowing the file to be displayed within the email body.

        :rtype: string
        """
        ...
    
    @content_id.setter
    def content_id(self, value): # -> None:
        """The content id for the attachment.

        This is used when the disposition is set to "inline" and the attachment
        is an image, allowing the file to be displayed within the email body.

        :param content_id: The content id for the attachment.
                           This is used when the Disposition is set to "inline"
                           and the attachment is an image, allowing the file to
                           be displayed within the email body.
        :type content_id: ContentId, string, optional
        """
        ...
    
    def get(self): # -> dict[Any, Any]:
        """
        Get a JSON-ready representation of this Attachment.

        :returns: This Attachment, ready for use in a request body.
        :rtype: dict
        """
        ...
    


