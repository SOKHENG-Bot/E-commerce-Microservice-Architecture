"""
This type stub file was generated by pyright.
"""

"""Twilio SendGrid v3/mail/send response body builder"""
class Mail:
    """Creates the response body for v3/mail/send"""
    def __init__(self, from_email=..., to_emails=..., subject=..., plain_text_content=..., html_content=..., amp_html_content=..., global_substitutions=..., is_multiple=...) -> None:
        """
        Creates the response body for a v3/mail/send API call

        :param from_email: The email address of the sender
        :type from_email: From, tuple, optional
        :param subject: The subject of the email
        :type subject: Subject, optional
        :param to_emails: The email address of the recipient
        :type to_emails: To, str, tuple, list(str), list(tuple),
                         list(To), optional
        :param plain_text_content: The plain text body of the email
        :type plain_text_content: string, optional
        :param html_content: The html body of the email
        :type html_content: string, optional
        :param amp_html_content: The amp-html body of the email
        :type amp_html_content: string, optional
        """
        ...
    
    def __str__(self) -> str:
        """A JSON-ready string representation of this Mail object.

        :returns: A JSON-ready string representation of this Mail object.
        :rtype: string
        """
        ...
    
    @property
    def personalizations(self): # -> list[Any]:
        """A list of one or more Personalization objects

        :rtype: list(Personalization)
        """
        ...
    
    def add_personalization(self, personalization, index=...): # -> None:
        """Add a Personalization object

        :param personalization: Add a Personalization object
        :type personalization: Personalization
        :param index: The index where to add the Personalization
        :type index: int
        """
        ...
    
    @property
    def to(self): # -> None:
        ...
    
    @to.setter
    def to(self, to_emails, global_substitutions=..., is_multiple=..., p=...): # -> None:
        """Adds To objects to the Personalization object

        :param to_emails: The email addresses of all recipients
        :type to_emails: To, str, tuple, list(str), list(tuple), list(To)
        :param global_substitutions: A dict of substitutions for all recipients
        :type global_substitutions: dict
        :param is_multiple: Create a new personalization for each recipient
        :type is_multiple: bool
        :param p: p is the Personalization object or Personalization object
                  index
        :type p: Personalization, integer, optional
        """
        ...
    
    def add_to(self, to_email, global_substitutions=..., is_multiple=..., p=...): # -> None:
        """Adds a To object to the Personalization object

        :param to_email: A To object
        :type to_email: To, str, tuple, list(str), list(tuple), list(To)
        :param global_substitutions: A dict of substitutions for all recipients
        :type global_substitutions: dict
        :param is_multiple: Create a new personalization for each recipient
        :type is_multiple: bool
        :param p: p is the Personalization object or Personalization object
                  index
        :type p: Personalization, integer, optional
        """
        ...
    
    @property
    def cc(self): # -> None:
        ...
    
    @cc.setter
    def cc(self, cc_emails, global_substitutions=..., is_multiple=..., p=...): # -> None:
        """Adds Cc objects to the Personalization object

        :param cc_emails: An Cc or list of Cc objects
        :type cc_emails: Cc, list(Cc), tuple
        :param global_substitutions: A dict of substitutions for all recipients
        :type global_substitutions: dict
        :param is_multiple: Create a new personalization for each recipient
        :type is_multiple: bool
        :param p: p is the Personalization object or Personalization object
                  index
        :type p: Personalization, integer, optional
        """
        ...
    
    def add_cc(self, cc_email, global_substitutions=..., is_multiple=..., p=...): # -> None:
        """Adds a Cc object to the Personalization object

        :param to_emails: An Cc object
        :type to_emails: Cc
        :param global_substitutions: A dict of substitutions for all recipients
        :type global_substitutions: dict
        :param is_multiple: Create a new personalization for each recipient
        :type is_multiple: bool
        :param p: p is the Personalization object or Personalization object
                  index
        :type p: Personalization, integer, optional
        """
        ...
    
    @property
    def bcc(self): # -> None:
        ...
    
    @bcc.setter
    def bcc(self, bcc_emails, global_substitutions=..., is_multiple=..., p=...): # -> None:
        """Adds Bcc objects to the Personalization object

        :param bcc_emails: An Bcc or list of Bcc objects
        :type bcc_emails: Bcc, list(Bcc), tuple
        :param global_substitutions: A dict of substitutions for all recipients
        :type global_substitutions: dict
        :param is_multiple: Create a new personalization for each recipient
        :type is_multiple: bool
        :param p: p is the Personalization object or Personalization object
                  index
        :type p: Personalization, integer, optional
        """
        ...
    
    def add_bcc(self, bcc_email, global_substitutions=..., is_multiple=..., p=...): # -> None:
        """Adds a Bcc object to the Personalization object

        :param to_emails: An Bcc object
        :type to_emails: Bcc
        :param global_substitutions: A dict of substitutions for all recipients
        :type global_substitutions: dict
        :param is_multiple: Create a new personalization for each recipient
        :type is_multiple: bool
        :param p: p is the Personalization object or Personalization object
                  index
        :type p: Personalization, integer, optional
        """
        ...
    
    @property
    def subject(self): # -> Subject | None:
        """The global Subject object

        :rtype: Subject
        """
        ...
    
    @subject.setter
    def subject(self, value): # -> None:
        """The subject of the email(s)

        :param value: The subject of the email(s)
        :type value: Subject, string
        """
        ...
    
    @property
    def headers(self): # -> list[Any] | None:
        """A list of global Header objects

        :rtype: list(Header)
        """
        ...
    
    @property
    def header(self): # -> None:
        ...
    
    @header.setter
    def header(self, headers): # -> None:
        """Add headers to the email

        :param value: A list of Header objects or a dict of header key/values
        :type value: Header, list(Header), dict
        """
        ...
    
    def add_header(self, header): # -> None:
        """Add headers to the email globaly or to a specific Personalization

        :param value: A Header object or a dict of header key/values
        :type value: Header, dict
        """
        ...
    
    @property
    def substitution(self): # -> None:
        ...
    
    @substitution.setter
    def substitution(self, substitution): # -> None:
        """Add substitutions to the email

        :param value: Add substitutions to the email
        :type value: Substitution, list(Substitution)
        """
        ...
    
    def add_substitution(self, substitution): # -> None:
        """Add a substitution to the email

        :param value: Add a substitution to the email
        :type value: Substitution
        """
        ...
    
    @property
    def custom_args(self): # -> list[Any] | None:
        """A list of global CustomArg objects

        :rtype: list(CustomArg)
        """
        ...
    
    @property
    def custom_arg(self): # -> list[Any] | None:
        ...
    
    @custom_arg.setter
    def custom_arg(self, custom_arg): # -> None:
        """Add custom args to the email

        :param value: A list of CustomArg objects or a dict of custom arg
                      key/values
        :type value: CustomArg, list(CustomArg), dict
        """
        ...
    
    def add_custom_arg(self, custom_arg): # -> None:
        """Add custom args to the email globaly or to a specific Personalization

        :param value: A CustomArg object or a dict of custom arg key/values
        :type value: CustomArg, dict
        """
        ...
    
    @property
    def send_at(self): # -> SendAt | None:
        """The global SendAt object

        :rtype: SendAt
        """
        ...
    
    @send_at.setter
    def send_at(self, value): # -> None:
        """A unix timestamp specifying when your email should
        be delivered.

        :param value: A unix timestamp specifying when your email should
        be delivered.
        :type value: SendAt, int
        """
        ...
    
    @property
    def dynamic_template_data(self): # -> None:
        ...
    
    @dynamic_template_data.setter
    def dynamic_template_data(self, value): # -> None:
        """Data for a transactional template

        :param value: Data for a transactional template
        :type value: DynamicTemplateData, a JSON-serializable structure
        """
        ...
    
    @property
    def from_email(self): # -> From | None:
        """The email address of the sender

        :rtype: From
        """
        ...
    
    @from_email.setter
    def from_email(self, value): # -> None:
        """The email address of the sender

        :param value: The email address of the sender
        :type value: From, str, tuple
        """
        ...
    
    @property
    def reply_to(self): # -> ReplyTo | None:
        """The reply to email address

        :rtype: ReplyTo
        """
        ...
    
    @reply_to.setter
    def reply_to(self, value): # -> None:
        """The reply to email address

        :param value: The reply to email address
        :type value: ReplyTo, str, tuple
        """
        ...
    
    @property
    def reply_to_list(self): # -> list[Any] | None:
        """A list of ReplyTo email addresses

        :rtype: list(ReplyTo), tuple
        """
        ...
    
    @reply_to_list.setter
    def reply_to_list(self, value): # -> None:
        """A list of ReplyTo email addresses

        :param value: A list of ReplyTo email addresses
        :type value: list(ReplyTo), tuple
        """
        ...
    
    @property
    def contents(self): # -> list[Any] | None:
        """The contents of the email

        :rtype: list(Content)
        """
        ...
    
    @property
    def content(self): # -> None:
        ...
    
    @content.setter
    def content(self, contents): # -> None:
        """The content(s) of the email

        :param contents: The content(s) of the email
        :type contents: Content, list(Content)
        """
        ...
    
    def add_content(self, content, mime_type=...): # -> None:
        """Add content to the email

        :param contents: Content to be added to the email
        :type contents: Content
        :param mime_type: Override the mime type
        :type mime_type: MimeType, str
        """
        ...
    
    @property
    def attachments(self): # -> list[Any] | None:
        """The attachments to this email

        :rtype: list(Attachment)
        """
        ...
    
    @property
    def attachment(self): # -> None:
        ...
    
    @attachment.setter
    def attachment(self, attachment): # -> None:
        """Add attachment(s) to this email

        :param attachment: Add attachment(s) to this email
        :type attachment: Attachment, list(Attachment)
        """
        ...
    
    def add_attachment(self, attachment): # -> None:
        """Add an attachment to this email

        :param attachment: Add an attachment to this email
        :type attachment: Attachment
        """
        ...
    
    @property
    def template_id(self): # -> TemplateId | None:
        """The transactional template id for this email

        :rtype: TemplateId
        """
        ...
    
    @template_id.setter
    def template_id(self, value): # -> None:
        """The transactional template id for this email

        :param value: The transactional template id for this email
        :type value: TemplateId
        """
        ...
    
    @property
    def sections(self): # -> list[Any] | None:
        """The block sections of code to be used as substitutions

        :rtype: Section
        """
        ...
    
    @property
    def section(self): # -> None:
        ...
    
    @section.setter
    def section(self, section): # -> None:
        """The block sections of code to be used as substitutions

        :rtype: Section, list(Section)
        """
        ...
    
    def add_section(self, section): # -> None:
        """A block section of code to be used as substitutions

        :param section: A block section of code to be used as substitutions
        :type section: Section
        """
        ...
    
    @property
    def categories(self): # -> list[Any] | None:
        """The categories assigned to this message

        :rtype: list(Category)
        """
        ...
    
    @property
    def category(self): # -> None:
        ...
    
    @category.setter
    def category(self, categories): # -> None:
        """Add categories assigned to this message

        :rtype: list(Category)
        """
        ...
    
    def add_category(self, category): # -> None:
        """Add a category assigned to this message

        :rtype: Category
        """
        ...
    
    @property
    def batch_id(self): # -> None:
        """The batch id for this email

        :rtype: BatchId
        """
        ...
    
    @batch_id.setter
    def batch_id(self, value): # -> None:
        """The batch id for this email

        :param value: The batch id for this email
        :type value: BatchId
        """
        ...
    
    @property
    def asm(self): # -> None:
        """An object specifying unsubscribe behavior.

        :rtype: Asm
        """
        ...
    
    @asm.setter
    def asm(self, value): # -> None:
        """An object specifying unsubscribe behavior.

        :param value: An object specifying unsubscribe behavior.
        :type value: Asm
        """
        ...
    
    @property
    def ip_pool_name(self): # -> None:
        """The IP Pool that you would like to send this email from

        :rtype: IpPoolName
        """
        ...
    
    @ip_pool_name.setter
    def ip_pool_name(self, value): # -> None:
        """The IP Pool that you would like to send this email from

        :paran value: The IP Pool that you would like to send this email from
        :type value: IpPoolName
        """
        ...
    
    @property
    def mail_settings(self): # -> None:
        """The mail settings for this email

        :rtype: MailSettings
        """
        ...
    
    @mail_settings.setter
    def mail_settings(self, value): # -> None:
        """The mail settings for this email

        :param value: The mail settings for this email
        :type value: MailSettings
        """
        ...
    
    @property
    def tracking_settings(self): # -> None:
        """The tracking settings for this email

        :rtype: TrackingSettings
        """
        ...
    
    @tracking_settings.setter
    def tracking_settings(self, value): # -> None:
        """The tracking settings for this email

        :param value: The tracking settings for this email
        :type value: TrackingSettings
        """
        ...
    
    def get(self): # -> dict[str, Any]:
        """
        Get a JSON-ready representation of this Mail object.

        :returns: This Mail object, ready for use in a request body.
        :rtype: dict
        """
        ...
    
    @classmethod
    def from_EmailMessage(cls, message): # -> Self:
        """Create a Mail object from an instance of
        email.message.EmailMessage.

        :type message: email.message.EmailMessage
        :rtype: Mail
        """
        ...
    


