"""
This type stub file was generated by pyright.
"""

basestring = ...
class Email:
    """An email address with an optional name."""
    def __init__(self, email=..., name=..., substitutions=..., subject=..., p=..., dynamic_template_data=...) -> None:
        """Create an Email with the given address and name.

        Either fill the separate name and email fields, or pass all information
        in the email parameter (e.g. email="dude Fella <example@example.com>").
        :param email: Email address, or name and address in standard format.
        :type email: string, optional
        :param name: Name for this sender or recipient.
        :type name: string, optional
        :param substitutions: String substitutions to be applied to the email.
        :type substitutions: list(Substitution), optional
        :param subject: Subject for this sender or recipient.
        :type subject: string, optional
        :param p: p is the Personalization object or Personalization object
                  index
        :type p: Personalization, integer, optional
        :param dynamic_template_data: Data for a dynamic transactional template.
        :type dynamic_template_data: DynamicTemplateData, optional
        """
        ...
    
    @property
    def name(self): # -> None:
        """Name associated with this email.

        :rtype: string
        """
        ...
    
    @name.setter
    def name(self, value): # -> None:
        """Name associated with this email.

        :param value: Name associated with this email.
        :type value: string
        """
        ...
    
    @property
    def email(self): # -> None:
        """Email address.

        See http://tools.ietf.org/html/rfc3696#section-3 and its errata
        http://www.rfc-editor.org/errata_search.php?rfc=3696 for information
        on valid email addresses.

        :rtype: string
        """
        ...
    
    @email.setter
    def email(self, value): # -> None:
        """Email address.

        See http://tools.ietf.org/html/rfc3696#section-3 and its errata
        http://www.rfc-editor.org/errata_search.php?rfc=3696 for information
        on valid email addresses.

        :param value: Email address.
        See http://tools.ietf.org/html/rfc3696#section-3 and its errata
        http://www.rfc-editor.org/errata_search.php?rfc=3696 for information
        on valid email addresses.
        :type value: string
        """
        ...
    
    @property
    def substitutions(self): # -> None:
        """A list of Substitution objects. These substitutions will apply to
           the text and html content of the body of your email, in addition
           to the subject and reply-to parameters. The total collective size
           of your substitutions may not exceed 10,000 bytes per
           personalization object.

        :rtype: list(Substitution)
        """
        ...
    
    @substitutions.setter
    def substitutions(self, value): # -> None:
        """A list of Substitution objects. These substitutions will apply to
        the text and html content of the body of your email, in addition to
        the subject and reply-to parameters. The total collective size of
        your substitutions may not exceed 10,000 bytes per personalization
        object.

        :param value: A list of Substitution objects. These substitutions will
        apply to the text and html content of the body of your email, in
        addition to the subject and reply-to parameters. The total collective
        size of your substitutions may not exceed 10,000 bytes per
        personalization object.
        :type value: list(Substitution)
        """
        ...
    
    @property
    def dynamic_template_data(self): # -> None:
        """Data for a dynamic transactional template.

        :rtype: DynamicTemplateData
        """
        ...
    
    @dynamic_template_data.setter
    def dynamic_template_data(self, value): # -> None:
        """Data for a dynamic transactional template.

        :param value: DynamicTemplateData
        :type value: DynamicTemplateData
        """
        ...
    
    @property
    def subject(self): # -> None:
        """Subject for this sender or recipient.

        :rtype: string
        """
        ...
    
    @subject.setter
    def subject(self, value): # -> None:
        """Subject for this sender or recipient.

        :param value: Subject for this sender or recipient.
        :type value: string, optional
        """
        ...
    
    @property
    def personalization(self): # -> int:
        """The Personalization object or Personalization object index

        :rtype: Personalization, integer
        """
        ...
    
    @personalization.setter
    def personalization(self, value): # -> None:
        """The Personalization object or Personalization object index

        :param value: The Personalization object or Personalization object
                      index
        :type value: Personalization, integer
        """
        ...
    
    def parse_email(self, email_info): # -> tuple[str | Any | None, str | Any | None]:
        """Allows passing emails as "Example Name <example@example.com>"

        :param email_info: Allows passing emails as
                           "Example Name <example@example.com>"
        :type email_info: string
        """
        ...
    
    def get(self): # -> dict[Any, Any]:
        """
        Get a JSON-ready representation of this Email.

        :returns: This Email, ready for use in a request body.
        :rtype: dict
        """
        ...
    


