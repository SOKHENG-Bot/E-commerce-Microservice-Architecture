"""
This type stub file was generated by pyright.
"""

class Personalization:
    """A Personalization defines who should receive an individual message and
    how that message should be handled.
    """
    def __init__(self) -> None:
        """Create an empty Personalization and initialize member variables."""
        ...
    
    def add_email(self, email): # -> None:
        ...
    
    @property
    def tos(self): # -> list[Any]:
        """A list of recipients for this Personalization.

        :rtype: list(dict)
        """
        ...
    
    @tos.setter
    def tos(self, value): # -> None:
        ...
    
    def add_to(self, email): # -> None:
        """Add a single recipient to this Personalization.

        :type email: Email
        """
        ...
    
    @property
    def from_email(self): # -> None:
        ...
    
    @from_email.setter
    def from_email(self, value): # -> None:
        ...
    
    def set_from(self, email): # -> None:
        ...
    
    @property
    def ccs(self): # -> list[Any]:
        """A list of recipients who will receive copies of this email.

        :rtype: list(dict)
        """
        ...
    
    @ccs.setter
    def ccs(self, value): # -> None:
        ...
    
    def add_cc(self, email): # -> None:
        """Add a single recipient to receive a copy of this email.

        :param email: new recipient to be CCed
        :type email: Email
        """
        ...
    
    @property
    def bccs(self): # -> list[Any]:
        """A list of recipients who will receive blind carbon copies of this email.

        :rtype: list(dict)
        """
        ...
    
    @bccs.setter
    def bccs(self, value): # -> None:
        ...
    
    def add_bcc(self, email): # -> None:
        """Add a single recipient to receive a blind carbon copy of this email.

        :param email: new recipient to be BCCed
        :type email: Email
        """
        ...
    
    @property
    def subject(self): # -> None:
        """The subject of your email (within this Personalization).

        Char length requirements, according to the RFC:
        https://stackoverflow.com/a/1592310

        :rtype: string
        """
        ...
    
    @subject.setter
    def subject(self, value): # -> None:
        ...
    
    @property
    def headers(self): # -> list[Any]:
        """The headers for emails in this Personalization.

        :rtype: list(dict)
        """
        ...
    
    @headers.setter
    def headers(self, value): # -> None:
        ...
    
    def add_header(self, header): # -> None:
        """Add a single Header to this Personalization.

        :type header: Header
        """
        ...
    
    @property
    def substitutions(self): # -> list[Any]:
        """Substitutions to be applied within this Personalization.

        :rtype: list(dict)
        """
        ...
    
    @substitutions.setter
    def substitutions(self, value): # -> None:
        ...
    
    def add_substitution(self, substitution): # -> None:
        """Add a new Substitution to this Personalization.

        :type substitution: Substitution
        """
        ...
    
    @property
    def custom_args(self): # -> list[Any]:
        """The CustomArgs that will be carried along with this Personalization.

        :rtype: list(dict)
        """
        ...
    
    @custom_args.setter
    def custom_args(self, value): # -> None:
        ...
    
    def add_custom_arg(self, custom_arg): # -> None:
        """Add a CustomArg to this Personalization.

        :type custom_arg: CustomArg
        """
        ...
    
    @property
    def send_at(self): # -> None:
        """A unix timestamp allowing you to specify when you want emails from
        this Personalization to be delivered. Scheduling more than 72 hours in
        advance is forbidden.

        :rtype: int
        """
        ...
    
    @send_at.setter
    def send_at(self, value): # -> None:
        ...
    
    @property
    def dynamic_template_data(self): # -> dict[Any, Any] | None:
        """Data for dynamic transactional template.
        Should be JSON-serializable structure.

        :rtype: JSON-serializable structure
        """
        ...
    
    @dynamic_template_data.setter
    def dynamic_template_data(self, value): # -> None:
        ...
    
    def get(self): # -> dict[Any, Any]:
        """
        Get a JSON-ready representation of this Personalization.

        :returns: This Personalization, ready for use in a request body.
        :rtype: dict
        """
        ...
    


