"""
This type stub file was generated by pyright.
"""

class Stats:
    """
    Object for building query params for a global email statistics request
    """
    def __init__(self, start_date=...) -> None:
        """Create a Stats object

        :param start_date: Date of when stats should begin in YYYY-MM-DD format, defaults to None
        :type start_date: string, optional
        """
        ...
    
    def __str__(self) -> str:
        """Get a JSON representation of this object.

        :rtype: string
        """
        ...
    
    def get(self): # -> dict[Any, Any]:
        """
        Get a JSON-ready representation of Stats

        :returns: This GlobalStats, ready for use in a request body.
        :rtype: response stats dict
        """
        ...
    
    @property
    def start_date(self): # -> None:
        """Date of when stats should begin in YYYY-MM-DD format

        :rtype: string
        """
        ...
    
    @start_date.setter
    def start_date(self, value): # -> None:
        """Date of when stats should begin in YYYY-MM-DD format

        :param value: Date representing when stats should begin
        :type value: string
        """
        ...
    
    @property
    def end_date(self): # -> None:
        """Date of when stats should end in YYYY-MM-DD format

        :rtype: string
        """
        ...
    
    @end_date.setter
    def end_date(self, value): # -> None:
        """Date of when stats should end in YYYY-MM-DD format

        :param value: Date representing when stats should end
        :type value: string
        """
        ...
    
    @property
    def aggregated_by(self): # -> None:
        """Chosen period (e.g. 'day', 'week', 'month') for how stats get grouped

        :rtype: string
        """
        ...
    
    @aggregated_by.setter
    def aggregated_by(self, value): # -> None:
        """Chosen period (e.g. 'day', 'week', 'month') for how stats get grouped

        :param value: Period for how keys will get formatted
        :type value: string
        """
        ...
    
    @property
    def sort_by_metric(self): # -> None:
        """Metric to sort stats by

        :rtype: string
        """
        ...
    
    @sort_by_metric.setter
    def sort_by_metric(self, value): # -> None:
        """Metric to sort stats by

        :param value: Chosen metric stats will by sorted by
        :type value: string
        """
        ...
    
    @property
    def sort_by_direction(self): # -> None:
        """Direction data will be sorted, either 'asc' or 'desc'

        :rtype: string
        """
        ...
    
    @sort_by_direction.setter
    def sort_by_direction(self, value): # -> None:
        """Direction data will be sorted, either 'asc' or 'desc'

        :param value: Direction of data, either 'asc' or 'desc'
        :type value: string
        """
        ...
    
    @property
    def limit(self): # -> None:
        """Max amount of results to be returned

        :rtype: int
        """
        ...
    
    @limit.setter
    def limit(self, value): # -> None:
        """Max amount of results to be returned

        :param value: Max amount of results
        :type value: int
        """
        ...
    
    @property
    def offset(self): # -> None:
        """Number of places a starting point of a data set will move

        :rtype: int
        """
        ...
    
    @offset.setter
    def offset(self, value): # -> None:
        """Number of places a starting point of a data set will move

        :param value: Number of positions to move from starting point
        :type value: int
        """
        ...
    


class CategoryStats(Stats):
    """
    object for building query params for a category statistics request
    """
    def __init__(self, start_date=..., categories=...) -> None:
        """Create a CategoryStats object

        :param start_date: Date of when stats should begin in YYYY-MM-DD format, defaults to None
        :type start_date: string, optional
        :param categories: list of categories to get results of, defaults to None
        :type categories: list(string), optional
        """
        ...
    
    def get(self): # -> dict[Any, Any]:
        """
        Get a JSON-ready representation of this CategoryStats.

        :return: response category stats dict
        """
        ...
    
    @property
    def categories(self): # -> list[Any] | None:
        """List of categories

        :rtype: list(Category)
        """
        ...
    
    def add_category(self, category): # -> None:
        """Appends a category to this object's category list

        :param category: Category to append to CategoryStats
        :type category: Category
        """
        ...
    


class SubuserStats(Stats):
    """
    object of building query params for a subuser statistics request
    """
    def __init__(self, start_date=..., subusers=...) -> None:
        """Create a SubuserStats object

        :param start_date: Date of when stats should begin in YYYY-MM-DD format, defaults to None
        :type start_date: string, optional
        :param subusers: list of subusers to get results of, defaults to None
        :type subusers: list(string), optional
        """
        ...
    
    def get(self): # -> dict[Any, Any]:
        """
        Get a JSON-ready representation of this SubuserStats.

        :return: response subuser stats dict
        """
        ...
    
    @property
    def subusers(self): # -> list[Any] | None:
        """List of subusers

        :rtype: list(Subuser)
        """
        ...
    
    def add_subuser(self, subuser): # -> None:
        """Appends a subuser to this object's subuser list

        :param subuser: Subuser to append to SubuserStats
        :type subuser: Subuser
        """
        ...
    


class Category:
    """
    Represents a searchable statistics category to be used in a CategoryStats object
    """
    def __init__(self, name=...) -> None:
        """Create a Category object

        :param name: name of category, defaults to None
        :type name: string, optional
        """
        ...
    
    @property
    def name(self): # -> None:
        """Get name of category

        :rtype: string
        """
        ...
    
    @name.setter
    def name(self, value): # -> None:
        """Set name of category

        :param value: name of the statistical category
        :type value: string
        """
        ...
    
    def get(self): # -> None:
        """
        Get a string representation of Category.

        :return: string of the category's name
        """
        ...
    


class Subuser:
    """
    Represents a searchable subuser to be used in a SubuserStats object
    """
    def __init__(self, name=...) -> None:
        """Create a Subuser object

        :param name: name of subuser, defaults to None
        :type name: string, optional
        """
        ...
    
    @property
    def name(self): # -> None:
        """Get name of the subuser

        :rtype: string
        """
        ...
    
    @name.setter
    def name(self, value): # -> None:
        """Set name of the subuser

        :param value: name of the subuser
        :type value: string
        """
        ...
    
    def get(self): # -> None:
        """
        Get a string representation of Subuser.

        :return: string of the subuser's name
        """
        ...
    


