services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - ecommerce-network

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,INTERNAL://0.0.0.0:9093
      # Replace 127.0.0.1 with actual host IP if needed
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,INTERNAL://kafka:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,INTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    healthcheck:
      test:
        [
          "CMD",
          "kafka-topics",
          "--bootstrap-server",
          "localhost:9092",
          "--list",
        ]
      interval: 10s
      timeout: 5s
      retries: 10
    ports:
      - "9092:9092"
    networks:
      - ecommerce-network

  # PostgreSQL Database for Notification Service
  notification_postgres:
    image: postgres:15
    container_name: notification_postgres
    environment:
      POSTGRES_DB: notification
      POSTGRES_USER: notification
      POSTGRES_PASSWORD: password
    ports:
      - "5434:5432" # Different port to avoid conflicts
    volumes:
      - notification_postgres_data:/var/lib/postgresql/data
      - ../database/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U notification -d notification"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - ecommerce-network

  # Kafka UI for monitoring Kafka topics and messages
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: notification_kafka_ui
    ports:
      - "8081:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: "notification-service-kafka"
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: "kafka:9092"
      KAFKA_CLUSTERS_0_ZOOKEEPER: "zookeeper:2181"
    depends_on:
      - kafka
    networks:
      - ecommerce-network

  # Redis for Notification Service (Caching & Rate Limiting)
  notification_redis:
    image: redis:latest
    container_name: notification_redis
    ports:
      - "6382:6379" # Different port to avoid conflicts
    command: redis-server --appendonly yes
    volumes:
      - notification_redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - ecommerce-network

  # Notification Service Nginx Load Balancer
  notification_service_nginx:
    image: nginx:alpine
    container_name: notification_service_nginx
    ports:
      - "8020:80" # Notification service nginx on port 8020
    volumes:
      - ../nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ../nginx/status.html:/usr/share/nginx/html/status.html:ro
    depends_on:
      - notification_service_1
      - notification_service_2
      - notification_service_3
    networks:
      - ecommerce-network
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--quiet",
          "--tries=1",
          "--spider",
          "http://127.0.0.1/nginx-health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3

  # Notification Service Instance 1
  notification_service_1:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    container_name: notification_service_1
    ports:
      - "8021:8000"
    env_file:
      - ../.env
    environment:
      SERVICE_NAME: notification_service_1
      NOTIFICATION_SERVICE_URL: http://notification_service_1:8000
      NOTIFICATION_SERVICE_HEALTH: http://notification_service_1:8000/health
    depends_on:
      kafka:
        condition: service_healthy
      notification_postgres:
        condition: service_healthy
      notification_redis:
        condition: service_healthy
    networks:
      - ecommerce-network

  # Notification Service Instance 2
  notification_service_2:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    container_name: notification_service_2
    ports:
      - "8022:8000" # External 8022 -> Internal 8000
    env_file:
      - ../.env
    environment:
      SERVICE_NAME: notification_service_2
      NOTIFICATION_SERVICE_URL: http://notification_service_2:8000
      NOTIFICATION_SERVICE_HEALTH: http://notification_service_2:8000/health
    depends_on:
      kafka:
        condition: service_healthy
      notification_postgres:
        condition: service_healthy
      notification_redis:
        condition: service_healthy
    networks:
      - ecommerce-network

  # Notification Service Instance 3
  notification_service_3:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    container_name: notification_service_3
    ports:
      - "8023:8000" # External 8023 -> Internal 8000
    env_file:
      - ../.env
    environment:
      SERVICE_NAME: notification_service_3
      NOTIFICATION_SERVICE_URL: http://notification_service_3:8000
      NOTIFICATION_SERVICE_HEALTH: http://notification_service_3:8000/health
    depends_on:
      kafka:
        condition: service_healthy
      notification_postgres:
        condition: service_healthy
      notification_redis:
        condition: service_healthy
    networks:
      - ecommerce-network

volumes:
  postgres_data:
  notification_postgres_data:
  notification_redis_data:

networks:
  ecommerce-network:
    external: true
