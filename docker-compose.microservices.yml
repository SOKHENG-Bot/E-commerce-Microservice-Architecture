services:
  # Infrastructure Services
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - ecommerce-network

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,INTERNAL://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,INTERNAL://kafka:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,INTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    healthcheck:
      test:
        [
          "CMD",
          "kafka-topics",
          "--bootstrap-server",
          "localhost:9092",
          "--list",
        ]
      interval: 10s
      timeout: 5s
      retries: 10
    ports:
      - "9092:9092"
    networks:
      - ecommerce-network

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: "local"
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: "kafka:9093"
      KAFKA_CLUSTERS_0_ZOOKEEPER: "zookeeper:2181"
    depends_on:
      - kafka
    networks:
      - ecommerce-network

  postgres:
    image: postgres:15
    container_name: postgres_db
    environment:
      POSTGRES_DB: notification
      POSTGRES_USER: ecommerce
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./user_service/database/init.sql:/docker-entrypoint-initdb.d/01_user.sql
      - ./product_service/init.sql:/docker-entrypoint-initdb.d/02_product.sql
      - ./order_service/init.sql:/docker-entrypoint-initdb.d/03_order.sql
      - ./notification_service/init.sql:/docker-entrypoint-initdb.d/04_notification.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - ecommerce-network

  redis:
    image: "redis:latest"
    container_name: redis
    ports:
      - "6380:6379"
    networks:
      - ecommerce-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # User Service Instances (Load Balanced)
  user_service_1:
    build:
      context: .
      dockerfile: user_service/docker/Dockerfile
    container_name: user_service_1
    ports:
      - "8011:8001"
    environment:
      # Application
      APP_NAME: "E-Commerce Service"
      APP_VERSION: "1.0.0"
      DEBUG: "true"
      ENVIRONMENT: "development"
      SERVICE_NAME: "user_service_1"

      # Service URLs
      USER_SERVICE_URL: "http://user_service_1:8001"
      USER_SERVICE_HEALTH: "http://user_service_1:8001/health"

      # Database
      USER_DATABASE_URL: "postgresql+asyncpg://postgres:password@postgres:5432/ecommerce"
      TEST_DATABASE_URL: "postgresql+asyncpg://postgres:password@postgres:5432/ecommerce_test"
      POSTGRES_DB: "ecommerce"
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "password"

      # Security
      SECRET_KEY: "47f4fb9b2bfd894a1229af7b265ff5c4"
      ALGORITHM: "HS256"
      ACCESS_TOKEN_EXPIRE_MINUTES: "30"
      REFRESH_TOKEN_EXPIRE_DAYS: "30"

      # Redis
      REDIS_URL: "redis://redis:6379/0"

      # Kafka
      KAFKA_BOOTSTRAP_SERVERS: "kafka:9092"
      KAFKA_GROUP_ID: "user-service-group"

      # CORS
      CORS_ORIGINS: '["*"]'
      CORS_CREDENTIALS: "true"
      CORS_METHODS: '["*"]'
      CORS_HEADERS: '["*"]'

      # Logging
      LOG_LEVEL: "INFO"
      ENABLE_ACCESS_LOGS: "true"

      # Testing
      SKIP_NOTIFICATION_HTTP_CALLS: "true"
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - ecommerce-network

  user_service_2:
    build:
      context: .
      dockerfile: user_service/docker/Dockerfile
    container_name: user_service_2
    ports:
      - "8012:8001"
    environment:
      # Application
      APP_NAME: "E-Commerce Service"
      APP_VERSION: "1.0.0"
      DEBUG: "true"
      ENVIRONMENT: "development"
      SERVICE_NAME: "user_service_2"

      # Service URLs
      USER_SERVICE_URL: "http://user_service_2:8001"
      USER_SERVICE_HEALTH: "http://user_service_2:8001/health"

      # Database
      USER_DATABASE_URL: "postgresql+asyncpg://postgres:password@postgres:5432/ecommerce"
      TEST_DATABASE_URL: "postgresql+asyncpg://postgres:password@postgres:5432/ecommerce_test"
      POSTGRES_DB: "ecommerce"
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "password"

      # Security
      SECRET_KEY: "47f4fb9b2bfd894a1229af7b265ff5c4"
      ALGORITHM: "HS256"
      ACCESS_TOKEN_EXPIRE_MINUTES: "30"
      REFRESH_TOKEN_EXPIRE_DAYS: "30"

      # Redis
      REDIS_URL: "redis://redis:6379/0"

      # Kafka
      KAFKA_BOOTSTRAP_SERVERS: "kafka:9092"
      KAFKA_GROUP_ID: "user-service-group"

      # CORS
      CORS_ORIGINS: '["*"]'
      CORS_CREDENTIALS: "true"
      CORS_METHODS: '["*"]'
      CORS_HEADERS: '["*"]'

      # Logging
      LOG_LEVEL: "INFO"
      ENABLE_ACCESS_LOGS: "true"
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - ecommerce-network

  user_service_3:
    build:
      context: .
      dockerfile: user_service/docker/Dockerfile
    container_name: user_service_3
    ports:
      - "8013:8001"
    environment:
      # Application
      APP_NAME: "E-Commerce Service"
      APP_VERSION: "1.0.0"
      DEBUG: "true"
      ENVIRONMENT: "development"
      SERVICE_NAME: "user_service_3"

      # Service URLs
      USER_SERVICE_URL: "http://user_service_3:8001"
      USER_SERVICE_HEALTH: "http://user_service_3:8001/health"

      # Database
      USER_DATABASE_URL: "postgresql+asyncpg://postgres:password@postgres:5432/ecommerce"
      TEST_DATABASE_URL: "postgresql+asyncpg://postgres:password@postgres:5432/ecommerce_test"
      POSTGRES_DB: "ecommerce"
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "password"

      # Security
      SECRET_KEY: "47f4fb9b2bfd894a1229af7b265ff5c4"
      ALGORITHM: "HS256"
      ACCESS_TOKEN_EXPIRE_MINUTES: "30"
      REFRESH_TOKEN_EXPIRE_DAYS: "30"

      # Redis
      REDIS_URL: "redis://redis:6379/0"

      # Kafka
      KAFKA_BOOTSTRAP_SERVERS: "kafka:9092"
      KAFKA_GROUP_ID: "user-service-group"

      # CORS
      CORS_ORIGINS: '["*"]'
      CORS_CREDENTIALS: "true"
      CORS_METHODS: '["*"]'
      CORS_HEADERS: '["*"]'

      # Logging
      LOG_LEVEL: "INFO"
      ENABLE_ACCESS_LOGS: "true"
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - ecommerce-network

  # User Service Nginx Load Balancer
  user_service_nginx:
    image: nginx:alpine
    container_name: user_service_nginx
    ports:
      - "8010:80" # User service nginx on port 8010
    volumes:
      - ./user_service/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./user_service/nginx/status.html:/usr/share/nginx/html/status.html:ro
    depends_on:
      - user_service_1
      - user_service_2
      - user_service_3
    networks:
      - ecommerce-network
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--quiet",
          "--tries=1",
          "--spider",
          "http://127.0.0.1/nginx-health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3

  # API Gateway Service
  api-gateway:
    build:
      context: .
      dockerfile: api_gateway/Dockerfile
    container_name: api_gateway
    ports:
      - "8090:8000" # API Gateway port
    environment:
      # Application
      APP_NAME: "API Gateway"
      APP_VERSION: "1.0.0"
      DEBUG: "true"
      ENVIRONMENT: "development"

      # API Configuration
      API_HOST: "0.0.0.0"
      API_PORT: 8000
      API_V1_PREFIX: "/api/v1"

      # Backend Service URLs
      USER_SERVICE_URL: "http://user_service_nginx"
      USER_SERVICE_URLS: '["http://user_service_1:8001", "http://user_service_2:8001", "http://user_service_3:8001"]'
      PRODUCT_SERVICE_URL: "http://product_service:8002"
      ORDER_SERVICE_URL: "http://order_service:8003"
      NOTIFICATION_SERVICE_URL: "http://notification_service:8000"

      # Service Health Check URLs
      USER_SERVICE_HEALTH: "http://user_service_nginx/health"
      USER_SERVICE_HEALTH_URLS: '["http://user_service_1:8001/health", "http://user_service_2:8001/health", "http://user_service_3:8001/health"]'
      PRODUCT_SERVICE_HEALTH: "http://product_service:8002/health"
      ORDER_SERVICE_HEALTH: "http://order_service:8003/health"
      NOTIFICATION_SERVICE_HEALTH: "http://notification_service:8000/health"

      # Security
      SECRET_KEY: "47f4fb9b2bfd894a1229af7b265ff5c4"
      JWT_ALGORITHM: "HS256"

      # Redis for Rate Limiting
      REDIS_URL: "redis://redis:6379/0"

      # Rate Limiting
      RATE_LIMIT_ENABLED: "true"
      RATE_LIMIT_REQUESTS: 100
      RATE_LIMIT_WINDOW: 60
      RATE_LIMIT_PER_USER_REQUESTS: 1000
      RATE_LIMIT_PER_USER_WINDOW: 3600

      # Circuit Breaker
      CIRCUIT_BREAKER_ENABLED: "true"
      CIRCUIT_BREAKER_FAILURE_THRESHOLD: 5
      CIRCUIT_BREAKER_TIMEOUT: 60
      CIRCUIT_BREAKER_RECOVERY_TIMEOUT: 30

      # Request Configuration
      REQUEST_TIMEOUT: 30
      MAX_REQUEST_SIZE: 10485760
      ENABLE_REQUEST_LOGGING: "true"

      # CORS
      CORS_ORIGINS: '["*"]'
      CORS_CREDENTIALS: "true"
      CORS_METHODS: '["GET", "POST", "PUT", "DELETE", "PATCH", "OPTIONS"]'
      CORS_HEADERS: '["*"]'

      # Caching
      ENABLE_RESPONSE_CACHING: "true"
      CACHE_TTL_DEFAULT: 300
      CACHE_TTL_STATIC: 3600

      # Logging
      LOG_LEVEL: "INFO"
      ENABLE_ACCESS_LOGS: "true"
    depends_on:
      - redis
      - user_service_1
      - user_service_2
      - user_service_3
    networks:
      - ecommerce-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Product and Order Services
  product_service:
    build:
      context: .
      dockerfile: product_service/docker/Dockerfile
    container_name: product_service
    ports:
      - "8002:8002" # External 8002 -> Internal 8002
    environment:
      # Application
      APP_NAME: "E-Commerce Product Service"
      APP_VERSION: "1.0.0"
      DEBUG: "true"
      ENVIRONMENT: "development"
      SERVICE_NAME: "product_service"

      # Database
      PRODUCT_DATABASE_URL: "postgresql+asyncpg://ecommerce:password@host.docker.internal:5432/product"
      DATABASE_POOL_SIZE: 50
      DATABASE_MAX_OVERFLOW: 100
      POSTGRES_DB: "product"
      POSTGRES_USER: "ecommerce"
      POSTGRES_PASSWORD: "password"

      # Security
      SECRET_KEY: "47f4fb9b2bfd894a1229af7b265ff5c4"
      ALGORITHM: "HS256"

      # Redis
      REDIS_URL: "redis://redis:6379/0"

      # Kafka
      KAFKA_BOOTSTRAP_SERVERS: "kafka:9092"
      KAFKA_GROUP_ID: "product-service-group"

      # CORS
      CORS_ORIGINS: '["*"]'
      CORS_CREDENTIALS: "true"
      CORS_METHODS: '["*"]'
      CORS_HEADERS: '["*"]'

      # Logging
      LOG_LEVEL: "INFO"
      ENABLE_ACCESS_LOGS: "true"

      # Performance Tuning for Load Testing
      REQUEST_TIMEOUT: 30
      RESPONSE_TIMEOUT: 30
      MAX_REQUEST_SIZE: 10485760
      ENABLE_REQUEST_LOGGING: "false" # Disable for performance under load

      # Rate Limiting (reduced for testing)
      RATE_LIMIT_ENABLED: "false" # Temporarily disable for load testing
      RATE_LIMIT_REQUESTS: 1000
      RATE_LIMIT_WINDOW: 60

      # Circuit Breaker (optimized for testing)
      CIRCUIT_BREAKER_ENABLED: "true"
      CIRCUIT_BREAKER_FAILURE_THRESHOLD: 10
      CIRCUIT_BREAKER_TIMEOUT: 30
      CIRCUIT_BREAKER_RECOVERY_TIMEOUT: 60

      # Caching (optimized for performance)
      ENABLE_RESPONSE_CACHING: "true"
      CACHE_TTL_DEFAULT: 300
      CACHE_TTL_STATIC: 3600
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - ecommerce-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  order_service:
    build:
      context: .
      dockerfile: order_service/Dockerfile
    container_name: order_service
    ports:
      - "8003:8000" # External 8003 -> Internal 8000
    environment:
      # Application
      APP_NAME: "E-Commerce Order Service"
      APP_VERSION: "1.0.0"
      DEBUG: "true"
      ENVIRONMENT: "development"
      SERVICE_NAME: "order_service"

      # Database
      ORDER_DATABASE_URL: "postgresql+asyncpg://postgres:password@postgres:5432/ecommerce"
      POSTGRES_DB: "ecommerce"
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "password"

      # Security
      SECRET_KEY: "47f4fb9b2bfd894a1229af7b265ff5c4"
      ALGORITHM: "HS256"

      # Redis
      REDIS_URL: "redis://redis:6379/0"

      # Kafka
      KAFKA_BOOTSTRAP_SERVERS: "kafka:9092"
      KAFKA_GROUP_ID: "order-service-group"

      # Payment Configuration (Stripe)
      STRIPE_PUBLISHABLE_KEY: ""
      STRIPE_SECRET_KEY: ""
      STRIPE_WEBHOOK_SECRET: ""

      # CORS
      CORS_ORIGINS: '["*"]'
      CORS_CREDENTIALS: "true"
      CORS_METHODS: '["*"]'
      CORS_HEADERS: '["*"]'

      # Logging
      LOG_LEVEL: "INFO"
      ENABLE_ACCESS_LOGS: "true"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - ecommerce-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  notification_service:
    build:
      context: .
      dockerfile: notification_service/Dockerfile
    container_name: notification_service
    ports:
      - "8004:8000"
    environment:
      # Database
      NOTIFICATION_DATABASE_URL: "postgresql+asyncpg://postgres:password@postgres:5432/ecommerce"
      POSTGRES_DB: "ecommerce"
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "password"

      # Redis
      REDIS_URL: "redis://redis:6379/0"

      # Kafka
      KAFKA_BOOTSTRAP_SERVERS: "kafka:9092"
      KAFKA_GROUP_ID: "notification-service-group"

      # SMTP Configuration
      SMTP_HOST: "smtp.gmail.com"
      SMTP_PORT: 587
      SMTP_USERNAME: ""
      SMTP_PASSWORD: ""
      SMTP_USE_TLS: "true"
      FROM_EMAIL: "noreply@ecommerce.com"
      FROM_NAME: "E-Commerce Platform"

      # Twilio SMS
      TWILIO_ACCOUNT_SID: ""
      TWILIO_AUTH_TOKEN: ""
      TWILIO_FROM_NUMBER: ""

      # Application
      DEBUG: "true"
      LOG_LEVEL: "INFO"
      ENVIRONMENT: "development"
      SECRET_KEY: "your-secret-key-change-in-production"

    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - ecommerce-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

volumes:
  postgres_data:

networks:
  ecommerce-network:
    driver: bridge
